scopeName: 'source.fire' # <scope> should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'FireScript' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'fire'
]
firstLineMatch: '' # A regular expression that is matched against the first line of the document when Atom is trying to decide if the grammar is appropriate. Useful for shell scripts, mostly.
# foldingStartMarker: '' # A regular expression that checks for the start of a foldable area (such as `{`).
# foldingStopMarker: '' # A regular expression that checks for the end of a foldable area (such as `}`). If both folding markers are matched in the same line, there will be no foldable area.
patterns: [ # An array of individual pattern declarations.
  # {
  #   match: '' # A regular expression that matches some content. Optional.
  #   begin: '' # A regular expression that precedes the content. Optional.
  #   end: '' # A regular expression that follows the content. Optional.
  #   name: '' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
  #   contentName: '' # A period-delimited list of classes that will be applied to the content within `begin` and `end`. Optional.
  #   captures: # An array of `name` designations for `match` expressions that capture multiple bits. Optional.
  #     0: # Arrays start at zero. This one will catch the whole regex. 1+ will catch the capture groups.
  #       name: '' # This should be self-explanatory by now.
  #   beginCaptures: # An array of `name` designations for `begin` expressions that capture multiple bits. Optional.
  #     0:
  #       name: ''
  #   endCaptures: # An array of `name` designations for `end` expressions that capture multiple bits. Optional.
  #     0:
  #       name: ''
  #   include: '' # This can be a reference to another grammar (by scope name), the current grammar (with `$self`), or a rule from the grammar's repository (with `#<rule>`). Optional.
  #   patterns: [] # This is where you can get tricky. When you have matched content, Atom will search within it for anything in the child array. You can have `patterns[]` within `patterns[]`, then throw an `include` in to jump to some other rule or refer back to the root of the grammar. If you are making a rule that captures a block that might contain other tags, you should refer back to the root. Optional, naturally.
  # }

  # keywords
  {
    match: '(?<!\\.)\\b(sync|await|break|case|catch|continue|debugger|default|do|export|for|func|gen|import|new|return|switch|try|while|yield)(?!\\s*:)\\b'
    name: 'keyword.control.fire'
  }

  # class
  {
    match: '(?<!\\.)\\b(class)(?:\\s+([a-zA-Z_$][\\w$]*))(?:\\s+(extends)\\s+([a-zA-Z_$][\\w$]*))?(\\s\\{)?'
    captures:
      1:
        name: 'storage.type.class.fire'
      2:
        name: 'entity.name.type.class.fire'
      3:
        name: 'storage.modifier.fire'
      4:
        name: 'entity.other.inherited-class.fire'
      5:
        name: 'invalid.illegal.fire'
    name: 'meta.class.fire'
  }

  # let / var
  {
    match: '(?<!\\.)\\b(let|var)(?!\\s*:)(?:\\s+(any|arr|bool|func|num|obj|reg|str))?\\b(?:\\s+([a-zA-Z_$][\\w$]*))'
    captures:
      1:
        name: 'storage.type.var.fire'
      2:
        name: 'support.type.fire'
      3:
        name: 'constant.other.fire'
  }

  # const
  {
    match: '(?<!\\.)\\b(const)(?!\\s*:)(?:\\s+(any|arr|bool|func|num|obj|reg|str))?\\b(?:\\s+([a-zA-Z_$][\\w$]*))'
    captures:
      1:
        name: 'storage.type.const.fire'
      2:
        name: 'support.type.fire'
      3:
        name: 'constant.other.fire'
  }

  # if .. else
  {
    begin: '(?<!\\.)\\b((?:el)?if)(?!\\s*:)\\s*'
    end: '$'
    beginCaptures:
      1:
        name: 'keyword.control.fire'
    patterns: [
      {
        include: '#expressions'
      }
      {
        include: '#comments'
      }
      {
        include: '#illegal_chars'
      }
    ]
  }

  # else
  {
    match: '(?<!\\.)\\b(else)(?:\\s+(if))?(?!\\s*:)\\s*'
    captures:
      '1':
         name: 'keyword.control.fire'
      '2':
        name: 'invalid.illegal.fire'
  }

  # function calls
  {
    include: '#call_expression'
  }

  # function declaration
  {
    include: '#function_declaration'
  }

  # identifier
  {
    include: '#identifier'
  }

  # strings
  {
    include: '#strings'
  }

  # comments
  {
    include: '#comments'
  }

  # binary operators
  {
    include: '#binary_expression'
  }

  # update operators
  {
    match: '\\+\\+|\\-\\-'
    name: 'keyword.operator.update.fire'
  }

  # unary operators
  {
    match: '~|!|delete|void|typeof'
    name: 'keyword.operator.unary.fire'
  }

  # assignment operators
  {
    match: '=|\\*=|\\*\\*=|/=|%=|\\+=|\\-=|<<=|>>=|>>>=|\\&=|\\^=|\\|='
    name: 'keyword.operator.assignment.fire'
  }

  # other operators
  {
    match: '\\.\\.\\.|\\.|\\(|\\)|\\{|\\}|\\[|\\]|,|:|;|\\?'
    name: 'keyword.operator.other.fire'
  }

  # anything else
  # {
  #   match: '.+\\b'
  #   name: 'invalid.illegal.fire'
  # }
]

repository: # An array of rules. If you're going to be referencing one bit of code over and over again, stick it here so that you can edit all in one place.
  comments:
    patterns: [
      {
        name: 'comment.block.documentation.fire'
        begin: '/\\*\\*'
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.begin.fire'
        end: '\\*/'
        endCaptures:
          '0':
            name: 'punctuation.definition.comment.end.fire'
      }
      {
        name: 'comment.block.fire'
        begin: '/\\*'
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.begin.fire'
        end: '\\*/'
        endCaptures:
          '0':
            name: 'punctuation.definition.comment.end.fire'
      }
      {
        name: 'comment.line.fire'
        begin: '#'
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.begin.fire'
        end: '$'
        endCaptures:
          '0':
            name: 'punctuation.definition.comment.end.fire'
      }

      # js style comments are illegal
      {
        name: 'invalid.illegal.fire'
        begin: '//'
        end: '$'
      }
    ]

  function_declaration:
    patterns: [
      {
        match: '(?<!\\.)\\b(function)|(async|gen|func)\\s+([a-zA-Z_$][\\w$]*)(?=\\s*\\()'
        captures:
          '1':
            name: 'invalid.illegal.fire'
          '2':
            name: 'storage.type.function.fire'
          '3':
            name: 'entity.name.function.fire'
      }
    ]

  strings:
    patterns: [
      {
        begin: '\\\''
        end: '\\\''
        name: 'string.fire'
      }

      # js style strings are illegal
      {
        name: 'invalid.illegal.fire'
        begin: '`'
        end: '`'
      }
      {
        name: 'invalid.illegal.fire'
        begin: '"'
        end: '"'
      }
    ]

  numbers:
    patterns: [
      {
        match: '\d+'
        name: 'constant.numeric.decimal.fire'
      }
    ]


  identifier:
    patterns: [
      {
        match: '\\b[a-zA-Z0-9_$]+\\b',
        name: 'variable.other.identifier.fire'
      }
    ]

  call_expression:
    patterns: [
      {
        begin: '\\b([a-zA-Z0-9_$]+)\\s*(?=\\()'
        end: '(?<=\\))'
        beginCaptures:
          '1':
            name: 'entity.name.function.fire'
        name: 'meta.function-call.fire'
        patterns: [
          {
            begin: '\\('
            beginCaptures:
              '0':
                'name': 'punctuation.definition.arguments.begin.bracket.round.fire'
            end: '\\)'
            endCaptures:
              '0':
                'name': 'punctuation.definition.arguments.end.bracket.round.fire'
            name: 'meta.arguments.fire'
            patterns: [
              {
                include: '#expressions'
              }
            ]
          }
        ]
      }
    ]

  arguments:
    patterns: [

    ]

  illegal_chars:
    patterns: [
      {
        name: 'invalid.illegal.fire'
        match: '\\s*.+'
      }
    ]

  expressions:
    patterns: [
      {
        include: '#strings'
      }
      {
        include: '#member_expression'
      }
      {
        include: '#call_expression'
      }
      {
        include: '#identifier'
      }
      {
        include: '#binary_expression'
      }
      {
        include: '#comments'
      }
    ]

  member_expression:
    patterns: [
      {
        match: '\\b([a-zA-Z0-9_$]+)(\\.)',
        captures:
          1:
            name: 'variable.other.identifier.fire'
          2:
            name: 'meta.delimiter.property.period.fire'
      }
    ]

  binary_expression:
    patterns: [
      {
        match: '\\s*(instanceof|in|\\+|\\-|\\*|/|%|\\*\\*|\\||\\^|\\&|===|!==|==|!=|<|>|>=|<=|<<|>>|>>>)\\s*'
        name: 'keyword.operator.binary.fire'
      }
      {
        include: '#expressions'
      }
    ]
