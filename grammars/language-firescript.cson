scopeName: 'source.fire' # <scope> should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'FireScript' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'fire'
]
firstLineMatch: '' # A regular expression that is matched against the first line of the document when Atom is trying to decide if the grammar is appropriate. Useful for shell scripts, mostly.
# foldingStartMarker: '' # A regular expression that checks for the start of a foldable area (such as `{`).
# foldingStopMarker: '' # A regular expression that checks for the end of a foldable area (such as `}`). If both folding markers are matched in the same line, there will be no foldable area.
patterns: [ # An array of individual pattern declarations.
  # {
  #   match: '' # A regular expression that matches some content. Optional.
  #   begin: '' # A regular expression that precedes the content. Optional.
  #   end: '' # A regular expression that follows the content. Optional.
  #   name: '' # A period-delimited list of classes that will be applied to the content identified by `match`. Optional.
  #   contentName: '' # A period-delimited list of classes that will be applied to the content within `begin` and `end`. Optional.
  #   captures: # An array of `name` designations for `match` expressions that capture multiple bits. Optional.
  #     0: # Arrays start at zero. This one will catch the whole regex. 1+ will catch the capture groups.
  #       name: '' # This should be self-explanatory by now.
  #   beginCaptures: # An array of `name` designations for `begin` expressions that capture multiple bits. Optional.
  #     0:
  #       name: ''
  #   endCaptures: # An array of `name` designations for `end` expressions that capture multiple bits. Optional.
  #     0:
  #       name: ''
  #   include: '' # This can be a reference to another grammar (by scope name), the current grammar (with `$self`), or a rule from the grammar's repository (with `#<rule>`). Optional.
  #   patterns: [] # This is where you can get tricky. When you have matched content, Atom will search within it for anything in the child array. You can have `patterns[]` within `patterns[]`, then throw an `include` in to jump to some other rule or refer back to the root of the grammar. If you are making a rule that captures a block that might contain other tags, you should refer back to the root. Optional, naturally.
  # }

  # keywords
  {
    match: 'async|await|break|case|catch|class|const|continue|debugger|default|do|elif|else|export|extends|for|func|gen|if|import|let|new|return|switch|try|var|while|yield'
    name: 'keyword.control.fire'
  }

  # identifier
  {
    match: '\\b[a-zA-Z0-9_]+\\b',
    name: 'variable.other.identifier.fire'
  }

  # strings
  {
    begin: '\\\''
    end: '\\\''
    name: 'string.fire'
  }

  # binary operators
  {
    match: 'instanceof|in|\\+|\\-|\\*|/|%|\\*\\*|\\||\\^|\\&|==|!=|===|!==|<|>|>=|<=|<<|>>|>>>'
    name: 'keyword.operator.binary.fire'
  }

  # update operators
  {
    match: '\\+\\+|\\-\\-'
    name: 'keyword.operator.update.fire'
  }

  # unary operators
  {
    match: '~|!|delete|void|typeof'
    name: 'keyword.operator.unary.fire'
  }

  # assignment operators
  {
    match: '=|\\*=|\\*\\*=|/=|%=|\\+=|\\-=|<<=|>>=|>>>=|\\&=|\\^=|\\|='
    name: 'keyword.operator.assignment.fire'
  }

  # other operators
  {
    match: '\\.\\.\\.|\\.|\\(|\\)|\\{|\\}|\\[|\\]|,|:|;|\\?'
    name: 'keyword.operator.other.fire'
  }
]

repository: # An array of rules. If you're going to be referencing one bit of code over and over again, stick it here so that you can edit all in one place.
  ruleName: # Can be anything.
    {
      name: ''
      match: ''
      end: ''
      endCaptures:
        0:
          name: ''
}
